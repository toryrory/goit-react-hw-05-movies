{"version":3,"file":"static/js/68.3c6a8d4c.chunk.js","mappings":"0PAEaA,EAAcC,EAAAA,GAAAA,GAAH,sHAOXC,EAAUD,EAAAA,GAAAA,GAAH,2KAUPE,EAAOF,EAAAA,GAAAA,EAAH,8CAGJG,EAASH,EAAAA,GAAAA,EAAH,uE,SCgBnB,EAjCqB,WACnB,OAAwCI,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,IARAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJN,EAAgBM,EACjB,IACAC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACP,IAECF,EAIL,OACE,8BACGA,EAAaY,OAAS,GACrB,SAAClB,EAAD,UACGM,EAAaa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAChB,UAACpB,EAAD,YACE,UAACE,EAAD,0BAAWiB,EAAX,QACA,SAAClB,EAAD,UAAOmB,MAFKF,EADE,OAQpB,uDAIP,C,mMCnCDG,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,oGACRF,EAAAA,EAAAA,IAAA,mCAAsCC,IAD9B,cACzBE,EADyB,yBAExBA,EAASb,MAFe,2CAAH,qDAIjBc,EAAiB,mCAAG,WAAMC,GAAN,uFACRL,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBI,IAFZ,cACzBF,EADyB,yBAIxBA,EAASb,KAAKgB,SAJU,2CAAH,sDAMjBC,EAAY,mCAAG,WAAMV,GAAN,uFACHG,EAAAA,EAAAA,IAAA,gBAAmBH,EAAnB,oBAAiCI,IAD9B,cACpBE,EADoB,yBAEnBA,EAASb,MAFU,2CAAH,sDAIZkB,EAAe,mCAAG,WAAMX,GAAN,uFACNG,EAAAA,EAAAA,IAAA,gBAAmBH,EAAnB,4BAAyCI,IADnC,cACvBE,EADuB,yBAEtBA,EAASb,KAAKmB,MAFQ,2CAAH,sDAIfrB,EAAe,mCAAG,WAAMS,GAAN,uFACNG,EAAAA,EAAAA,IAAA,gBACZH,EADY,4BACUI,EADV,YADM,cACvBE,EADuB,yBAItBA,EAASb,KAAKgB,SAJQ,2CAAH,qD","sources":["pages/MovieReviews/MovieReviews.styled.jsx","pages/MovieReviews/MovieReviews.jsx","services/fetchMovie.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CommentList = styled.ul`\n    display: flex;\n    gap: 30px;\n    flex-wrap: wrap;\n    padding: 0;\n    margin: 25px;\n`\nexport const Comment = styled.li`\npadding: 20px;\nborder-radius: 50px;\n  list-style: none;\n  border: 2px solid #8b2d84;\n  width: 425px;\n  height: 350px;\n  overflow-y: auto;\n\n`;\nexport const Text = styled.p`\n    font-size: 14px;\n`\nexport const Author = styled.p`\n    font-size: 20px;\n    font-weight: 500;\n\n`","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/fetchMovie';\nimport { Comment, CommentList, Text, Author } from './MovieReviews.styled';\n\nconst MovieReviews = () => {\n  const [movieReviews, setMovieReviews] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieReviews(movieId)\n      .then(data => {\n        setMovieReviews(data);\n      })\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  if (!movieReviews) {\n    return;\n  }\n\n  return (\n    <>\n      {movieReviews.length > 0 ? (\n        <CommentList>\n          {movieReviews.map(({ id, author, content }) => (\n            <Comment key={id}>\n              <Author>ðŸ˜Ž{author}:</Author>\n              <Text>{content}</Text>\n            </Comment>\n          ))}\n        </CommentList>\n      ) : (\n        <div>This film has no reviews</div>\n      )}\n    </>\n  );\n};\nexport default MovieReviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '345007f9ab440e5b86cef51be6397df1';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n  return response.data;\n};\nexport const getSearchedMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data.results;\n};\nexport const getMovieData = async id => {\n  const response = await axios.get(`movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n};\nexport const getMovieCredits = async id => {\n  const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n  return response.data.cast;\n};\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["CommentList","styled","Comment","Text","Author","useState","movieReviews","setMovieReviews","movieId","useParams","useEffect","getMovieReviews","then","data","catch","error","console","log","length","map","id","author","content","axios","API_KEY","getTrendingMovies","response","getSearchedMovies","query","results","getMovieData","getMovieCredits","cast"],"sourceRoot":""}